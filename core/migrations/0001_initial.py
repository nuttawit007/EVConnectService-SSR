# Generated by Django 5.2.4 on 2025-10-07 15:30

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def table_exists(schema_editor, table_name):
    return table_name in schema_editor.connection.introspection.table_names()


def move_tables_forward(apps, schema_editor):
    rename_pairs = [
        ("Profile", "client_profile", "core_profile"),
        ("Vehicle", "client_vehicle", "core_vehicle"),
        ("ServiceType", "client_servicetype", "core_service_type"),
        ("Appointment", "client_appointment", "core_appointment"),
        ("Review", "client_review", "core_review"),
    ]

    for model_name, old_name, new_name in rename_pairs:
        model = apps.get_model("core", model_name)
        if table_exists(schema_editor, old_name) and not table_exists(schema_editor, new_name):
            schema_editor.alter_db_table(model, old_name, new_name)

    appointment_model = apps.get_model("core", "Appointment")
    through_model = appointment_model.service_types.through
    old_m2m = "client_appointment_service_types"
    new_m2m = "core_appointment_service_types"
    if table_exists(schema_editor, old_m2m) and not table_exists(schema_editor, new_m2m):
        schema_editor.alter_db_table(through_model, old_m2m, new_m2m)


def move_tables_backward(apps, schema_editor):
    rename_pairs = [
        ("Profile", "core_profile", "client_profile"),
        ("Vehicle", "core_vehicle", "client_vehicle"),
        ("ServiceType", "core_service_type", "client_servicetype"),
        ("Appointment", "core_appointment", "client_appointment"),
        ("Review", "core_review", "client_review"),
    ]

    for model_name, old_name, new_name in rename_pairs:
        model = apps.get_model("core", model_name)
        if table_exists(schema_editor, old_name) and not table_exists(schema_editor, new_name):
            schema_editor.alter_db_table(model, old_name, new_name)

    appointment_model = apps.get_model("core", "Appointment")
    through_model = appointment_model.service_types.through
    old_m2m = "core_appointment_service_types"
    new_m2m = "client_appointment_service_types"
    if table_exists(schema_editor, old_m2m) and not table_exists(schema_editor, new_m2m):
        schema_editor.alter_db_table(through_model, old_m2m, new_m2m)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('client', '0008_alter_appointment_vehicle_alter_vehicle_user'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name='Profile',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('phone_number', models.CharField(max_length=15, unique=True)),
                        ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                    ],
                    options={
                        'db_table': 'core_profile',
                    },
                ),
                migrations.CreateModel(
                    name='Vehicle',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('brand', models.CharField(max_length=50)),
                        ('model', models.CharField(max_length=50)),
                        ('license_plate', models.CharField(max_length=50, unique=True)),
                        ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
                    ],
                    options={
                        'db_table': 'core_vehicle',
                    },
                ),
                migrations.CreateModel(
                    name='ServiceType',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('name', models.CharField(max_length=100)),
                        ('description', models.TextField(blank=True, null=True)),
                    ],
                    options={
                        'db_table': 'core_service_type',
                    },
                ),
                migrations.CreateModel(
                    name='Appointment',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('description', models.TextField(blank=True, null=True)),
                        ('date', models.DateField()),
                        ('time', models.TimeField()),
                        ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN-PROGRESS', 'In progress'), ('DONE', 'Done'), ('REJECT', 'Reject')], default='PENDING', max_length=20)),
                        ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to=settings.AUTH_USER_MODEL)),
                        ('service_types', models.ManyToManyField(db_table='core_appointment_service_types', related_name='services', to='core.servicetype')),
                        ('vehicle', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='core.vehicle')),
                    ],
                    options={
                        'db_table': 'core_appointment',
                    },
                ),
                migrations.CreateModel(
                    name='Review',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('score', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                        ('comment', models.TextField(blank=True, null=True)),
                        ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='core.appointment')),
                    ],
                    options={
                        'db_table': 'core_review',
                    },
                ),
            ],
            database_operations=[],
        ),
        migrations.RunPython(move_tables_forward, move_tables_backward),
    ]
